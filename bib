#!/bin/bash
# shellcheck disable=1111,1112,2030,2031,2034,2086

# change if your bible folder has a different name
bible_name="bible"

main() {
  get_text $1
  get_terminal_width
  print_title "$@"
  format_markdown

  # justify text
  if [ $width -le 20 ]; then
    passes=26
  elif [ $width -le 30 ]; then
    passes=15
  elif [ $width -le 40 ]; then
    passes=8
  elif [ $width -le 50 ] || [ $width -le 60 ]; then
    passes=7
  elif [ $width -le 70 ]; then
    passes=6
  elif [ $width -le 80 ]; then
    passes=5
  else
    passes=4
  fi

  for i in $(seq 1 $passes); do
    justify_poetry
  done
  for i in $(seq 1 $passes); do
    justify_normal
  done

  cleanup
  # output
  if [[ $3 != '' ]]; then
    print_passage "$@"
  elif [[ $2 != '' ]]; then
    print_verse "$@"
  else
    print_chapter
  fi
}

set_books_array() {
  books_array='{
    "genesis": ["gen", "gn", "ge"],
    "exodus": ["ex", "exod", "exo"],
    "leviticus": ["lev", "le", "lv"],
    "numbers": ["num", "nu", "nm", "nb"],
    "deuteronomy": ["deut", "de", "dt"],
    "joshua": ["josh", "jos", "jsh"],
    "judges": ["judg", "jdg", "jg", "jdgs"],
    "ruth": ["rth", "ru"],
    "1samuel": ["1sam", "1sm", "1sa", "1s", "isam", "isa", "1stsamuel", "1stsam", "firstsamuel", "firstsam"],
    "2samuel": ["2sam", "2sm", "2sa", "2s", "iisam", "iisa", "2ndsamuel", "2ndsam", "secondsamuel", "secondsam"],
    "1kings": ["1kgs", "1ki", "1kin", "1k", "ikgs", "iki", "1stkings", "1stkgs", "firstkings", "firstkgs"],
    "2kings": ["2kgs", "2ki", "2kin", "2k", "iikgs", "iiki", "2ndkings", "2ndkgs", "secondkings", "secondkgs"],
    "1chronicles": ["1chron", "1chr", "1ch", "ichron", "ichr"],
    "2chronicles": ["2chron", "2chr", "2ch", "iichron", "iichr"],
    "ezra": ["ezr", "ez"],
    "nehemiah": ["neh", "ne"],
    "esther": ["est", "esth", "es"],
    "job": ["jb"],
    "psalm": ["ps", "psalms", "pslm", "psa", "psm", "pss"],
    "proverbs": ["prov", "pro", "prv", "pr"],
    "ecclesiastes": ["eccles", "eccle", "ecc", "ec", "qoh"],
    "song": ["songofsolomon", "songofsongs", "sos", "so", "canticleofcanticles", "canticles", "cant"],
    "isaiah": ["isa", "is"],
    "jeremiah": ["jer", "je", "jr"],
    "lamentations": ["lam", "la"],
    "ezekiel": ["ezek", "eze", "ezk"],
    "daniel": ["dan", "da", "dn"],
    "hosea": ["hos", "ho"],
    "joel": ["jl"],
    "amos": ["am"],
    "obadiah": ["obad", "ob"],
    "jonah": ["jnh", "jon"],
    "micah": ["mic", "mc"],
    "nahum": ["nah", "na"],
    "habakkuk": ["hab", "hb"],
    "zephaniah": ["zeph", "zep", "zp"],
    "haggai": ["hag", "hg"],
    "zechariah": ["zech", "zec", "zc"],
    "malachi": ["mal", "ml"],
    "matthew": ["matt", "mt"],
    "mark": ["mrk", "mar", "mk", "mr"],
    "luke": ["luk", "lk"],
    "john": ["joh", "jhn", "jn"],
    "acts": ["act", "ac"],
    "romans": ["rom", "ro", "rm"],
    "1corinthians": ["1cor", "1co", "icor", "ico", "1stcorinthians", "firstcorinthians"],
    "2corinthians": ["2cor", "2co", "iicor", "iico",  "2ndcorinthians", "secondcorinthians"],
    "galatians": ["gal", "ga"],
    "ephesians": ["eph", "ephes"],
    "philippians": ["phil", "php", "pp"],
    "colossians": ["col", "co"],
    "1thessalonians": ["1thess", "1thes", "1th", "ithessalonians", "ithess", "ithes", "1stthessalonians", "1stthess"],
    "2thessalonians": ["2thess", "2thes", "2th", "iithessalonians", "iithess", "iithes", "2ndthessalonians", "2ndthess"],
    "1timothy": ["1tim", "1ti", "itimothy", "itim", "iti", "1sttimothy", "1sttim", "firsttimothy", "firsttim"],
    "2timothy": ["2tim", "2ti", "iitimothy", "iitim", "iiti", "2ndtimothy", "2ndtim", "secondtimothy", "secondtim"],
    "titus": ["tit", "ti"],
    "philemon": ["philem", "phm", "pm"],
    "hebrews": ["heb"],
    "james": ["jas", "jm"],
    "1peter": ["1pet", "1pe", "1pt", "1p", "ip", "ipet", "ipt", "ipe", "1pet"],
    "2peter": ["2pet", "2pe", "2pt", "2p", "iip", "iipet", "iipt", "iipe"],
    "1john": ["1joh", "1jhn", "1jn", "1j", "1joh", "1jo", "ijohn"],
    "2john": ["2joh", "2jhn", "2jn", "2j", "2joh", "2jo", "iijohn"],
    "3john": ["3joh", "3jhn", "3jn", "3j", "3jhn", "3jo", "iiijohn"],
    "jude": ["jud", "jd"],
    "revelation": ["rev", "re"]
  }'
}

show_help() {
  echo "Usage: $0 [-ch]"
  echo "   -c    Disable context verses"
  echo "   -h    Display help"
  echo "   -a    Display list of abbreviations"
  exit 1
}

show_abbreviations() {
  set_books_array
  get_terminal_width

  hline=$(
    printf '=%.0s' $(seq 1 "$width")
    echo
  )

  abbreviations="$(
    echo "$books_array" | jq -r 'to_entries | .[] | "\(.key) | \(.value | join(", "))"' | column -t -s '|'
  )"

  sed_args=(
    -e 's/([^ ])    ([^ ])/\1  \2/g'
    -e 's/([^ ])     ([^ ])/\1   \2/g'
    -e 's/([^ ])      ([^ ])/\1    \2/g'
    -e 's/([^ ])       ([^ ])/\1     \2/g'
    -e 's/([^ ])        ([^ ])/\1      \2/g'
    -e 's/([^ ])         ([^ ])/\1       \2/g'
    -e 's/([^ ])          ([^ ])/\1        \2/g'
    -e 's/([^ ])           ([^ ])/\1         \2/g'
    -e 's/([^ ])            ([^ ])/\1          \2/g'
    -e 's/([^ ])             ([^ ])/\1           \2/g'
    -e 's/([^ ])              ([^ ])/\1            \2/g'
    -e 's/([^ ])               ([^ ])/\1             \2/g'
    -e 's/([^ ])                ([^ ])/\1              \2/g'
    -e 's/([^ ])                 ([^ ])/\1               \2/g'
    -e 's/([^ ])                  ([^ ])/\1                \2/g'
    -e 's/^/  /g'

    # move char to newline if width-1 is a space or symbol
    -e "s/^(.{$((width - 1))})([A-Za-z0-9]*,)/\1\n                   \2/"
    -e "s/^(.{$((width))})([A-Za-z0-9]*,)/\1\n                   \2/"

    -e "s/^(.{$((width - 1))})([A-Za-z0-9]*)$/\1\n                   \2/"
    -e "s/^(.{$((width))})([A-Za-z0-9]*)$/\1\n                   \2/"
  )

  abbreviations=$(echo "$abbreviations" | sed -E "${sed_args[@]}")

  output="$(
    echo "$hline"
    title="Abbreviations"
    padding=$(((width + ${#title}) / 2))
    printf "%*s\n" $padding "$title"
    echo "$hline"
    echo -e "${abbreviations}"
  )"

  echo "$output" | less -RFX
  exit 1
}

find_chapter() {
  set_books_array

  # remove the trailing digits to get the book name
  book=$(echo "$1" | sed 's/[0-9]*$//')

  # remove the letters to get the chapter number
  chapter=$(echo "$1" | sed 's/^[0-9]*[a-zA-Z]*//')

  # find book in books array
  book=$(echo "$books_array" | jq -r --arg book "$book" 'to_entries[] | select(.value[] == $book) | .key')
}

get_terminal_width() {
  width=$(tput cols)
}

get_text() {
  # Author: bjarneh
  # Reddit: https://www.reddit.com/u/bjarneh/s/ACMAhTI1WY
  # Source: https://www.reddit.com/r/commandline/s/ySIsbxOYex

  # find file relative to bib
  dir_of_script=$(dirname "$(readlink -f $0)")
  bible_dir="${dir_of_script}/${bible_name}"
  chapter_file="${bible_dir}/${1}.md"
  # enter if given book name is an abbreviation
  if [ ! -f "${chapter_file}" ]; then
    find_chapter $1
    chapter_file="${bible_dir}/${book}${chapter}.md"
    # enter if book name does not exist
    if [ ! -f "${chapter_file}" ]; then
      echo "[bib] chapter not found: ${1}"
      exit 1
    fi
  fi
  text=$(cat "${chapter_file}")
}

print_title() {
  hline=$(
    printf '=%.0s' $(seq 1 "$width")
    echo
  )
  if [[ $3 != '' ]]; then
    title="$(echo "$text" | grep '^# .*' | sed 's/# \(.*\) *(*[A-Z]*)*$/\1/'):$2-$3"
  elif [[ $2 != '' ]]; then
    title="$(echo "$text" | grep '^# .*' | sed 's/# \(.*\) *(*[A-Z]*)*$/\1/'):$2"
  else
    title="$(echo "$text" | grep '^# .*' | sed 's/# \(.*\) *(*[A-Z]*)*$/\1/')"
  fi
}

format_markdown() {
  sed_args=(
    # remove headings
    -e 's/^(# |#### |##### ).*//'

    # fix instances of `] [`
    -e 's/\] \[/ /'

    # format verses
    -e 's/###### (¶* *[0-9][0-9][0-9])/\1   tempnewline/g'
    -e 's/###### (¶* *[0-9][0-9])/\1    tempnewline/g'
    -e 's/###### (¶* *[0-9])/\1     tempnewline/g'
  )
  text=$(echo "$text" | sed -E "${sed_args[@]}")

  text=$(echo "$text" | sed -E ':a;$!{N;s/tempnewline\n//;ba;}')
  text=$(echo "$text" | sed -E ':a;$!{N;s/\n¶ / ~\n/;ba;}')

  sed_args=(
    # fix/remove markdown syntax
    -e 's/\\\*/tempasterisk/g'
    -e 's/==//g'
    -e 's/—/––/g'

    # italic -> brackets
    -e 's/\*([A-Za-z0-9])/[\1/g'
    -e 's/([A-Za-z0-9!?.,”’;:])\*/\1]/g'

    # \[ -> [ and \] -> ]
    -e 's/\\\[/[/g'
    -e 's/\\\]/]/g'
    -e 's/\\//g'

    # remove footnotes
    # convert footnotes
    -e 's/\[\^1\]:*/¹/g'
    -e 's/\[\^2\]:*/²/g'
    -e 's/\[\^3\]:*/³/g'
    -e 's/\[\^4\]:*/⁴/g'
    -e 's/\[\^5\]:*/⁵/g'
    -e 's/\[\^6\]:*/⁶/g'

    -e 's/^> /      > /g'
    -e 's/tempasterisk/*/g'

    # add space before lines that are not on the same line as the verse num
    -e 's/(^[^0-9 ])/      \1/g'
  )
  text=$(echo "$text" | sed -E "${sed_args[@]}")
}

justify_poetry() {
  sed_args=(
    # add newline when width is a space
    -e "s/^(.{6}>.{$((width - 9))}) /\1\n      > /"

    # hyphenate words that are in width
    -e "s/^(.{6}>.{$((width - 9))})([A-Za-z0-9])([A-Za-z0-9])([A-Za-z0-9])/\1\2-\n      > \3\4/"

    # move char to newline if width-2 is [[
    -e "s/^(.{6}>.{$((width - 10))})\[\[([A-Za-z0-9])/\1\n      > [[\2/"

    # move char to newline if width-3 is a 2-letter word with ] at end
    -e "s/^(.{6}>.{$((width - 11))}) ([A-Za-z0-9]{2}\])/\1\n      > \2/"

    # move char to newline if width-1 is a space or symbol
    -e "s/^(.{6}>.{$((width - 9))})([ “‘[({])([A-Za-z0-9“‘[({][^ ])/\1\n      > \2\3/"
    -e "s/^(.{6}>.{$((width - 9))}) ([A-Za-z0-9“‘[({][^ ])/\1\n      > \2/"

    # ] or ) not followed by space

    # move char to newline if width is a 3+ letter word + ) or ] + punctuation
    -e "s/^(.{6}>.{$((width - 11))}[A-Za-z0-9])([A-Za-z0-9]{2}\))([^ ])/\1-\n      > \2\3/"
    -e "s/^(.{6}>.{$((width - 11))}[A-Za-z0-9])([A-Za-z0-9]{2}\])([^ ])/\1-\n      > \2\3/"

    -e "s/^(.{6}>.{$((width - 10))}[A-Za-z0-9])([A-Za-z0-9]{2}\))([^ ])/\1-\n      > \2\3/"
    -e "s/^(.{6}>.{$((width - 10))}[A-Za-z0-9])([A-Za-z0-9]{2}\])([^ ])/\1-\n      > \2\3/"

    # move char to newline if width is 2 letter word + ) or ] + punctuation
    -e "s/^(.{6}>.{$((width - 11))}) ([A-Za-z0-9]{2}\))([^ ])/\1\n      > \2\3/"
    -e "s/^(.{6}>.{$((width - 10))}) ([A-Za-z0-9]{2}\))([^ ])/\1\n      > \2\3/"
    -e "s/^(.{6}>.{$((width - 11))}[A-Za-z0-9])([A-Za-z0-9]{2}\))([^ ])/\1-\n      > \2\3/"
    -e "s/^(.{6}>.{$((width - 11))}[A-Za-z0-9])([A-Za-z0-9]{2}\))([^ ])/\1-\n      > \2\3/"

    -e "s/^(.{6}>.{$((width - 11))})(\([A-Za-z0-9]{2}\))([^ ])/\1\n      > \2\3/"
    -e "s/^(.{6}>.{$((width - 10))})(\([A-Za-z0-9]{2}\))([^ ])/\1\n      > \2\3/"
    -e "s/^(.{6}>.{$((width - 11))})(\[[A-Za-z0-9]{2}\])([^ ])/\1\n      > \2\3/"
    -e "s/^(.{6}>.{$((width - 10))})(\[[A-Za-z0-9]{2}\])([^ ])/\1\n      > \2\3/"

    -e "s/^(.{6}>.{$((width - 11))}) ([A-Za-z0-9]{2}\])([^ ])/\1\n      > \2\3/"
    -e "s/^(.{6}>.{$((width - 10))}) ([A-Za-z0-9]{2}\])([^ ])/\1\n      > \2\3/"
    -e "s/^(.{6}>.{$((width - 11))}[A-Za-z0-9])([A-Za-z0-9]{2}\])([^ ])/\1-\n      > \2\3/"
    -e "s/^(.{6}>.{$((width - 10))}[A-Za-z0-9])([A-Za-z0-9]{2}\])([^ ])/\1-\n      > \2\3/"

    # ] or ) followed by space

    # move char to newline if width is a 3+ letter word + ) or ] + punctuation
    -e "s/^(.{6}>.{$((width - 10))}[A-Za-z0-9])([A-Za-z0-9]{2}\))/\1-\n      > \2/"
    -e "s/^(.{6}>.{$((width - 10))}[A-Za-z0-9])([A-Za-z0-9]{2}\])/\1-\n      > \2/"

    -e "s/^(.{6}>.{$((width - 9))}[A-Za-z0-9])([A-Za-z0-9]{2}\))/\1-\n      > \2/"
    -e "s/^(.{6}>.{$((width - 9))}[A-Za-z0-9])([A-Za-z0-9]{2}\])/\1-\n      > \2/"

    # move char to newline if width is 2 letter word + ) or ] + punctuation
    -e "s/^(.{6}>.{$((width - 10))}) ([A-Za-z0-9]{2}\))/\1\n      > \2/"
    -e "s/^(.{6}>.{$((width - 9))}) ([A-Za-z0-9]{2}\))/\1\n      > \2/"
    -e "s/^(.{6}>.{$((width - 10))}[A-Za-z0-9])([A-Za-z0-9]{2}\))/\1-\n      > \2/"
    -e "s/^(.{6}>.{$((width - 9))}[A-Za-z0-9])([A-Za-z0-9]{2}\))/\1-\n      > \2/"

    -e "s/^(.{6}>.{$((width - 10))}) ([A-Za-z0-9]{2}\])/\1\n      > \2/"
    -e "s/^(.{6}>.{$((width - 9))}) ([A-Za-z0-9]{2}\])/\1\n      > \2/"
    -e "s/^(.{6}>.{$((width - 10))}[A-Za-z0-9])([A-Za-z0-9]{2}\])/\1-\n      > \2/"
    -e "s/^(.{6}>.{$((width - 9))}[A-Za-z0-9])([A-Za-z0-9]{2}\])/\1-\n      > \2/"

    # move char to newline if width + 1 is punctuation

    -e "s/^(.{6}>.{$((width - 10))}[A-Za-z0-9])([A-Za-z0-9]{2}[!?.,”’;:])/\1-\n      > \2/"
    -e "s/^(.{6}>.{$((width - 9))}[A-Za-z0-9])([A-Za-z0-9]{2}[!?.,”’;:])/\1-\n      > \2/"

    -e "s/^(.{6}>.{$((width - 10))}) ([A-Za-z0-9]{2}[!?.,”’;:])/\1\n      > \2/"
    -e "s/^(.{6}>.{$((width - 9))}) ([A-Za-z0-9]{2}[!?.,”’;:])/\1\n      > \2/"

    -e "s/^(.{6}>.{$((width - 10))}) ([A-Za-z0-9]{2}[!?.,”’;:])/\1\n      > \2/"
    -e "s/^(.{6}>.{$((width - 9))}) ([A-Za-z0-9]{2}[!?.,”’;:])/\1\n      > \2/"

    # move char to newline if width-1 is a hyphen
    -e "s/^(.{6}>.{$((width - 9))})-([A-Za-z0-9“‘])/\1-\n      > \2/"

    # move char to newline if width-1 is an em dash
    -e "s/^(.{6}>.{$((width - 10))})––([A-Za-z0-9“‘])/\1––\n      > \2/"

    # move char to newline if width is a hyphen
    -e "s/^(.{6}>.{$((width - 9))})([A-Za-z])-([A-Za-z])/\1\2-\n      > \3/"

    # move char to newline if width is an em dash
    -e "s/^(.{6}>.{$((width - 10))})([A-Za-z])––([A-Za-z])/\1\2––\n      > \3/"

    # add newline right after punctuation
    -e "s/^(.{6}>.{$((width - 8))})([!?.,”’;:])/\1\2\n      > /"

    # fix verses that didn't get move to newline
    -e "s/^(.{6}>.{$((width - 7))}) /\1\n      > /"
    -e "s/^(.{6}>.{$((width - 7))})([!?.,”’;:])/\1\n      > \2/"
    -e "s/^(.{6}>.{$((width - 8))}) /\1\n      > /"
    -e "s/> *>/>/"

    # move char if width + 1 is punctuation
    -e "s/^(.{6}>.{$((width - 10))}) ([A-Za-z0-9]{2}[,])/\1\n      > \2/"
    -e "s/^(.{6}>.{$((width - 9))}) ([A-Za-z0-9]{2}[,])/\1\n      > \2/"

    # fix verse number spacing
    -e 's/([0-9]{1})      /\1     /g'
    -e 's/([0-9]{2})     /\1    /g'
    -e 's/([0-9]{3})    /\1   /g'

    # add newline if width+1 is a space
    -e "s/^(.{4}>.{$((width - 5))}) /\1\n      > /"
  )
  text=$(echo "$text" | sed -E "${sed_args[@]}")
}

justify_normal() {
  sed_args=(
    # add newline when width is a space
    -e "s/^(.{$((width - 1))}) /\1\n      /"

    # hyphenate words that are in width
    -e "s/^(.{$((width - 2))}[A-Za-z0-9])([A-Za-z0-9][A-Za-z0-9])/\1-\n      \2/"

    # move char to newline if width-2 is [[
    -e "s/^(.{$((width - 3))})\[\[([A-Za-z0-9])/\1\n      [[\2/"

    # move char to newline if width-3 is a 2-letter word with ] at end
    -e "s/^(.{$((width - 4))}) ([A-Za-z0-9]{2}\])/\1\n      \2/"

    # move char to newline if width-1 is a space or symbol
    -e "s/^(.{$((width - 2))})([“‘[({])([A-Za-z0-9“‘[({][^ ])/\1\n      \2\3/"
    -e "s/^(.{$((width - 2))}) ([A-Za-z0-9“‘[({][^ ])/\1\n      \2/"

    # ] or ) not followed by space

    # move char to newline if width is a 3+ letter word + ) or ] + punctuation
    -e "s/^(.{$((width - 4))}[A-Za-z0-9])([A-Za-z0-9]{2}\))([^ ])/\1-\n      \2\3/"
    -e "s/^(.{$((width - 4))}[A-Za-z0-9])([A-Za-z0-9]{2}\])([^ ])/\1-\n      \2\3/"

    -e "s/^(.{$((width - 3))}[A-Za-z0-9])([A-Za-z0-9]{2}\))([^ ])/\1-\n      \2\3/"
    -e "s/^(.{$((width - 3))}[A-Za-z0-9])([A-Za-z0-9]{2}\])([^ ])/\1-\n      \2\3/"

    # move char to newline if width is 2 letter word + ) or ] + punctuation
    -e "s/^(.{$((width - 4))}) ([A-Za-z0-9]{2}\))([^ ])/\1\n      \2\3/"
    -e "s/^(.{$((width - 3))}) ([A-Za-z0-9]{2}\))([^ ])/\1\n      \2\3/"
    -e "s/^(.{$((width - 4))}[A-Za-z0-9])([A-Za-z0-9]{2}\))([^ ])/\1-\n      \2\3/"
    -e "s/^(.{$((width - 3))}[A-Za-z0-9])([A-Za-z0-9]{2}\))([^ ])/\1-\n      \2\3/"

    -e "s/^(.{$((width - 4))})(\([A-Za-z0-9]{2}\))([^ ])/\1\n      \2\3/"
    -e "s/^(.{$((width - 3))})(\([A-Za-z0-9]{2}\))([^ ])/\1\n      \2\3/"
    -e "s/^(.{$((width - 4))})(\[[A-Za-z0-9]{2}\])([^ ])/\1\n      \2\3/"
    -e "s/^(.{$((width - 3))})(\[[A-Za-z0-9]{2}\])([^ ])/\1\n      \2\3/"

    -e "s/^(.{$((width - 4))}) ([A-Za-z0-9]{2}\])([^ ])/\1\n      \2\3/"
    -e "s/^(.{$((width - 3))}) ([A-Za-z0-9]{2}\])([^ ])/\1\n      \2\3/"
    -e "s/^(.{$((width - 4))}[A-Za-z0-9])([A-Za-z0-9]{2}\])([^ ])/\1-\n      \2\3/"
    -e "s/^(.{$((width - 3))}[A-Za-z0-9])([A-Za-z0-9]{2}\])([^ ])/\1-\n      \2\3/"

    # ] or ) followed by space

    # move char to newline if width is a 3+ letter word + ) or ] + punctuation
    -e "s/^(.{$((width - 3))}[A-Za-z0-9])([A-Za-z0-9]{2}\))/\1-\n      \2/"
    -e "s/^(.{$((width - 3))}[A-Za-z0-9])([A-Za-z0-9]{2}\])/\1-\n      \2/"

    -e "s/^(.{$((width - 2))}[A-Za-z0-9])([A-Za-z0-9]{2}\))/\1-\n      \2/"
    -e "s/^(.{$((width - 2))}[A-Za-z0-9])([A-Za-z0-9]{2}\])/\1-\n      \2/"

    # move char to newline if width is 2 letter word + ) or ] + punctuation
    -e "s/^(.{$((width - 3))}) ([A-Za-z0-9]{2}\))/\1\n      \2/"
    -e "s/^(.{$((width - 2))}) ([A-Za-z0-9]{2}\))/\1\n      \2/"
    -e "s/^(.{$((width - 3))}[A-Za-z0-9])([A-Za-z0-9]{2}\))/\1-\n      \2/"
    -e "s/^(.{$((width - 2))}[A-Za-z0-9])([A-Za-z0-9]{2}\))/\1-\n      \2/"

    -e "s/^(.{$((width - 3))})(\([A-Za-z0-9]{2}\))/\1\n      \2/"
    -e "s/^(.{$((width - 2))})(\([A-Za-z0-9]{2}\))/\1\n      \2/"
    -e "s/^(.{$((width - 3))})(\[[A-Za-z0-9]{2}\])/\1\n      \2/"
    -e "s/^(.{$((width - 2))})(\[[A-Za-z0-9]{2}\])/\1\n      \2/"

    -e "s/^(.{$((width - 3))}) ([A-Za-z0-9]{2}\])/\1\n      \2/"
    -e "s/^(.{$((width - 2))}) ([A-Za-z0-9]{2}\])/\1\n      \2/"
    -e "s/^(.{$((width - 3))}[A-Za-z0-9])([A-Za-z0-9]{2}\])/\1-\n      \2/"
    -e "s/^(.{$((width - 2))}[A-Za-z0-9])([A-Za-z0-9]{2}\])/\1-\n      \2/"

    # move char to newline if width + 1 is punctutation

    -e "s/^(.{$((width - 3))}[A-Za-z0-9])([A-Za-z0-9]{2}[!?.,”’;:-])/\1-\n      \2/"
    -e "s/^(.{$((width - 2))}[A-Za-z0-9])([A-Za-z0-9]{2}[!?.,”’;:-])/\1-\n      \2/"

    -e "s/^(.{$((width - 3))}) ([A-Za-z0-9]{2}[!?.,”’;:-])/\1\n      \2/"
    -e "s/^(.{$((width - 2))}) ([A-Za-z0-9]{2}[!?.,”’;:-])/\1\n      \2/"

    -e "s/^(.{$((width - 3))}) ([A-Za-z0-9]{2}[!?.,”’;:-])/\1\n      \2/"
    -e "s/^(.{$((width - 2))}) ([A-Za-z0-9]{2}[!?.,”’;:-])/\1\n      \2/"

    # move char to newline if width-1 is a hyphen
    -e "s/^(.{$((width - 2))})-([A-Za-z0-9“‘])/\1-\n      \2/"

    # move char to newline if width-1 is an em dash
    -e "s/^(.{$((width - 3))})––([A-Za-z0-9“‘])/\1––\n      \2/"

    # move char to newline if width is a hyphen
    -e "s/^(.{$((width - 2))})([A-Za-z])-([A-Za-z])/\1\2-\n      \3/"

    # move char to newline if width is an em dash
    -e "s/^(.{$((width - 3))})([A-Za-z])––([A-Za-z])/\1\2––\n      \3/"
    -e "s/^(.{$((width - 2))})([A-Za-z])––([A-Za-z])/\1\2––\n      \3/"

    # add newline right after punctuation
    -e "s/^(.{$((width - 1))})([!?.,”’;:])/\1\2\n      /"

    # fix verses that didn't get move to newline
    -e "s/^(.{$((width))})([!?.,”’;:])/\1\n      \2/"
    # -e "s/^(.{$((width - 1))}) /\1\n      /"

    # fix verse number spacing
    -e 's/([0-9]{1})      /\1     /g'
    -e 's/([0-9]{2})     /\1   /g'
    -e 's/([0-9]{3})   /\1  /g'
  )
  text=$(echo "$text" | sed -E "${sed_args[@]}")

  # add newline if width+1 is a space
  text=$(echo "$text" | sed -E "s/^(.{$((width))}) /\1\n      /")
}

cleanup() {
  sed_args=(
    # fix spacing
    -e 's/^ {2,4}([^ ])/      \1/g'
    -e 's/^ {6,}([^ ])/      \1/g'

    # remove unnecessary character
    -e "s/^(.{$((width - 1))})––/\1–/g"

    # change ~ back to pilcrow signs
    -e 's/~/¶/g'
  )
  text=$(echo "$text" | sed -E "${sed_args[@]}")

  text=$(echo "$text" | sed -E ':a;$!{N;s/\n *¶ */ ¶/;ba;}')
  text=$(echo "$text" | sed -E "s/^(.{$((width))})¶/\1\n     ¶/g")
  text=$(echo "$text" | sed -E ':a;$!{N;s/ ¶\n([0-9])    /\n\1   ↓/;ba;}')
  text=$(echo "$text" | sed -E ':a;$!{N;s/ ¶\n([0-9][0-9])   /\n\1  ↓/;ba;}')
  text=$(echo "$text" | sed -E ':a;$!{N;s/ ¶\n([0-9][0-9][0-9])  /\n\1 ↓/;ba;}')

  sed_args=(
    # remove blank lines
    -e 's/ *$//g'
    -e '/^$/d'
    -e '/^ *>* *$/d'

    # reformat verse nums to be right-aligned
    -e 's/^([0-9]{2}) / \1/g'
    -e 's/^([0-9]{1})  /  \1/g'
    -e 's/^([¹²³⁴⁵⁶]) (.*)/   \1[\2]/g'

    # fix verses in hundreds
    -e 's/^([0-9]{3}) *> /\1   > /g'

    # fix ↓ with no space before >
    -e "s/↓>/↓ >/"
  )
  text=$(echo "$text" | sed -E "${sed_args[@]}")
}

print_passage() {
  output="$(
    sed_args=(
      # format editorial headings
      -e 's/^ *## (.*)//'
      -e '/^$/d'
    )
    text=$(echo "$text" | sed -E "${sed_args[@]}")
    echo "$hline"
    padding=$(((width + ${#title}) / 2))
    printf "%*s\n" $padding "$title"
    echo "$hline"
    # echo -e "${text}" | awk "/^ *$(($2)) /{print; flag=1; next} /^ *$(($3 + 1)) /{flag=0} flag"
    echo -e "${text}" | awk "/^ *$(($2)) /{print \"\033[31m\" \$0; flag=1; next} /^ *$(($3 + 1)) /{flag=0} flag {print \"\033[31m\" \$0}"
  )"
  echo "$output" | less -RFX
  echo -en "\033[0m"
}

print_verse() {
  sed_args=(
    # format editorial headings
    -e 's/^ *## (.*)//'
    -e '/^$/d'
  )
  text=$(echo "$text" | sed -E "${sed_args[@]}")
  echo "$hline"
  padding=$(((width + ${#title}) / 2))
  printf "%*s\n" $padding "$title"
  echo "$hline"
  if [[ $ARG_CONTEXT == 'true' ]]; then
    echo -e "${text}" | awk "/^ *$(($2 - 2)) /{print; flag=1; next} /^ *$(($2 - 1)) /{flag=0} flag"
    echo -e "${text}" | awk "/^ *$(($2 - 1)) /{print; flag=1; next} /^ *$(($2 - 0)) /{flag=0} flag"
    echo -e "${text}" | awk "/^ *$2 /{print \"\033[31m\" \$0; flag=1; next} /^ *($(($2 + 1)) |¹)/{flag=0} flag"
    echo -en "\033[0m"
    echo -e "${text}" | awk "/^ *$(($2 + 1)) /{print; flag=1; next} /^ *($(($2 + 2)) |¹)/{flag=0} flag"
    echo -e "${text}" | awk "/^ *$(($2 + 2)) /{print; flag=1; next} /^ *($(($2 + 3)) |¹)/{flag=0} flag"
  elif [[ $ARG_CONTEXT == 'false' ]]; then
    echo -e "${text}" | awk "/^ *$2 /{print \"\033[31m\" \$0; flag=1; next} /^ *($(($2 + 1)) |¹)/{flag=0} flag"
    echo -en "\033[0m"
  fi
}

print_chapter() {
  sed_args=(
    -e '1s/^      ## (.*)/      [\1]/g'
    -e 's/^      ## (.*)/\n      [\1]/g'
    # add blank line before footnotes
    -e 's/^ *¹/\n&/'
  )
  text=$(echo "$text" | sed -E "${sed_args[@]}")
  output="$(
    echo "$hline"
    padding=$(((width + ${#title}) / 2))
    printf "%*s\n" $padding "$title"
    echo "$hline"
    echo -e "$text"
  )"
  echo "$output" | less -RFX
}

# Process command line args
ARG_CONTEXT="true"
while getopts ':cah?' c; do
  case $c in
  c) ARG_CONTEXT="false" ;;
  a) show_abbreviations ;;
  h | ?) show_help ;;
  esac
done
shift $((OPTIND - 1))

main "$@"
