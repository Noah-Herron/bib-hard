#!/bin/bash
# shellcheck disable=1111,1112,2034

show_help() {
  echo "Usage: $0 [-ch]"
  echo "   -c    Disable context verses"
  echo "   -h    Display help"
  exit 1
}

# Clear version variable if it exists and set defaults for others
ARG_CONTEXT="true" # Which version to use from BibleGateway.com

# Process command line args
while getopts ':c?h' c; do
  case $c in
  c) ARG_CONTEXT="false" ;;
  h | ?) show_help ;;
  esac
done
shift $((OPTIND - 1))

main() {
  text=$(cat ~/Bin/Bible/"${1}".md)
  get_terminal_width
  print_title "$@"
  format_markdown
  # justify text
  if [ $width -le 20 ]; then
    x=26
  elif [ $width -le 30 ]; then
    x=15
  elif [ $width -le 40 ]; then
    x=8
  elif [ $width -le 50 ] || [ $width -le 60 ]; then
    x=7
  elif [ $width -le 70 ]; then
    x=6
  elif [ $width -le 80 ]; then
    x=5
  else
    x=4
  fi

  for i in $(seq 1 $x); do
    justify_poetry
  done
  for i in $(seq 1 $x); do
    justify_normal
  done
  cleanup
  # output
  if [[ $3 != '' ]]; then
    print_passage "$@"
  elif [[ $2 != '' ]]; then
    print_verse "$@"
  else
    print_chapter
  fi
}
get_terminal_width() {
  width=$(tput cols)
}

print_title() {
  hline=$(
    printf '=%.0s' $(seq 1 "$width")
    echo
  )
  if [[ $3 != '' ]]; then
    title="$(echo "$text" | grep '^# .*' | sed 's/# \(.*\) *(*[A-Z]*)*$/\1/'):$2-$3"
  elif [[ $2 != '' ]]; then
    title="$(echo "$text" | grep '^# .*' | sed 's/# \(.*\) *(*[A-Z]*)*$/\1/'):$2"
  else
    title="$(echo "$text" | grep '^# .*' | sed 's/# \(.*\) *(*[A-Z]*)*$/\1/')"
  fi
}

format_markdown() {
  sed_args=(
    # remove headings
    -e 's/^(# |#### |##### ).*//'

    # format verses
    -e 's/###### (¶* *[0-9][0-9][0-9])/\1   tempnewline/g'
    -e 's/###### (¶* *[0-9][0-9])/\1    tempnewline/g'
    -e 's/###### (¶* *[0-9])/\1     tempnewline/g'
  )
  text=$(echo "$text" | sed -E "${sed_args[@]}")

  text=$(echo "$text" | sed -E ':a;$!{N;s/tempnewline\n//;ba;}')
  text=$(echo "$text" | sed -E ':a;$!{N;s/\n¶ / ~\n/;ba;}')

  sed_args=(
    # fix/remove markdown syntax
    -e 's/\\\*/tempasterisk/g'
    -e 's/==//g'
    -e 's/—/––/g'


    # italic -> brackets
    -e 's/\*([A-Za-z0-9])/[\1/g'
    -e 's/([A-Za-z0-9!?.,”’;:])\*/\1]/g'

    # \[ -> [ and \] -> ]
    -e 's/\\\[/[/g'
    -e 's/\\\]/]/g'
    -e 's/\\//g'

    # remove footnotes
    # convert footnotes
    -e 's/\[\^1\]:*/¹/g'
    -e 's/\[\^2\]:*/²/g'
    -e 's/\[\^3\]:*/³/g'
    -e 's/\[\^4\]:*/⁴/g'
    -e 's/\[\^5\]:*/⁵/g'
    -e 's/\[\^6\]:*/⁶/g'

    -e 's/^> /      > /g'
    -e 's/tempasterisk/*/g'

    # add space before lines that are not on the same line as the verse num
    -e 's/(^[^0-9 ])/      \1/g'
  )
  text=$(echo "$text" | sed -E "${sed_args[@]}")
}

justify_poetry() {
  sed_args=(
    # add newline when width is a space
    -e "s/^(.{6}>.{$((width - 9))}) /\1\n      > /"

    # hyphenate words that are in width
    -e "s/^(.{6}>.{$((width - 9))})([A-Za-z0-9])([A-Za-z0-9])([^ ])/\1\2-\n      > \3\4/"

    # move char to newline if width-2 is [[
    -e "s/^(.{$((width - 3))})\[\[([A-Za-z0-9])/\1\n      [[\2/"

    # move char to newline if width-1 is a space or symbol
    -e "s/^(.{6}>.{$((width - 9))})([ “‘[({])([A-Za-z0-9“‘[({])/\1\n      > \2\3/"

    # move char to newline if width-1 is a hyphen
    -e "s/^(.{6}>.{$((width - 9))})-([A-Za-z0-9“‘])/\1-\n      > \2/"

    # move char to newline if width-1 is an em dash
    -e "s/^(.{6}>.{$((width - 10))})––([A-Za-z0-9“‘])/\1––\n      > \2/"

    # move char to newline if width is a hyphen
    -e "s/^(.{6}>.{$((width - 9))})([A-Za-z])-([A-Za-z])/\1\2-\n      > \3/"

    # move char to newline if width is an em dash
    -e "s/^(.{6}>.{$((width - 10))})([A-Za-z])––([A-Za-z])/\1\2––\n      > \3/"

    # add newline right after punctuation
    -e "s/^(.{6}>.{$((width - 8))})([!?.,”’;:])/\1\2\n      > /"

    # fix verses that didn't get move to newline
    -e "s/^(.{6}>.{$((width - 7))}) /\1\n      > /"
    -e "s/^(.{6}>.{$((width - 7))})([!?.,”’;:])/\1\n      > \2/"
    -e "s/^(.{6}>.{$((width - 8))}) /\1\n      > /"
    -e "s/> *>/>/"

    # fix verse number spacing
    -e 's/([0-9]{1})      /\1     /g'
    -e 's/([0-9]{2})     /\1    /g'
    -e 's/([0-9]{3})    /\1   /g'

    # add newline if width+1 is a space
    -e "s/^(.{4}>.{$((width - 5))}) /\1\n      > /"
  )
  text=$(echo "$text" | sed -E "${sed_args[@]}")
}

justify_normal() {
  sed_args=(
  # add newline when width is a space
  -e "s/^(.{$((width - 1))}) /\1\n      /"

  # hyphenate words that are in width
  -e "s/^(.{$((width - 2))})([A-Za-z0-9])([A-Za-z0-9])([^ ])/\1\2-\n      \3\4/"

  # move char to newline if width-2 is [[
  -e "s/^(.{$((width - 3))})\[\[([A-Za-z0-9])/\1\n      [[\2/"

  # move char to newline if width-1 is a space or symbol
  -e "s/^(.{$((width - 2))})([ “‘[({])([A-Za-z0-9“‘[({])/\1\n      \2\3/"

  # move char to newline if width-1 is a hyphen
  -e "s/^(.{$((width - 2))})-([A-Za-z0-9“‘])/\1-\n      \2/"

  # move char to newline if width-1 is an em dash
  -e "s/^(.{$((width - 3))})––([A-Za-z0-9“‘])/\1––\n      \2/"

  # move char to newline if width is a hyphen
  -e "s/^(.{$((width - 2))})([A-Za-z])-([A-Za-z])/\1\2-\n      \3/"

  # move char to newline if width is an em dash
  -e "s/^(.{$((width - 3))})([A-Za-z])––([A-Za-z])/\1\2––\n      \3/"
  -e "s/^(.{$((width - 2))})([A-Za-z])––([A-Za-z])/\1\2––\n      \3/"

  # add newline right after punctuation
  -e "s/^(.{$((width - 1))})([!?.,”’;:])/\1\2\n      /"

  # fix verses that didn't get move to newline
  -e "s/^(.{$((width))})([!?.,”’;:])/\1\n      \2/"
  # -e "s/^(.{$((width - 1))}) /\1\n      /"

  # fix verse number spacing
  -e 's/([0-9]{1})      /\1     /g'
  -e 's/([0-9]{2})     /\1   /g'
  -e 's/([0-9]{3})   /\1  /g'
  )
  text=$(echo "$text" | sed -E "${sed_args[@]}")

  # add newline if width+1 is a space
  text=$(echo "$text" | sed -E "s/^(.{$((width))}) /\1\n      /")
}

cleanup() {
  sed_args=(
    # fix spacing
    -e 's/^ {2,4}([^ ])/      \1/g'
    -e 's/^ {6,}([^ ])/      \1/g'

    # remove unnecessary character
    -e "s/^(.{$((width - 1))})––/\1–/g"

    # change ~ back to pilcrow signs
    -e 's/~/¶/g'
  )
  text=$(echo "$text" | sed -E "${sed_args[@]}")

  text=$(echo "$text" | sed -E ':a;$!{N;s/\n *¶ */ ¶/;ba;}')
  text=$(echo "$text" | sed -E "s/^(.{$((width))})¶/\1\n     ¶/g")
  text=$(echo "$text" | sed -E ':a;$!{N;s/ ¶\n([0-9])    /\n\1   ↓/;ba;}')
  text=$(echo "$text" | sed -E ':a;$!{N;s/ ¶\n([0-9][0-9])   /\n\1  ↓/;ba;}')
  text=$(echo "$text" | sed -E ':a;$!{N;s/ ¶\n([0-9][0-9][0-9])  /\n\1 ↓/;ba;}')

  sed_args=(
    # remove blank lines
    -e 's/ *$//g'
    -e '/^$/d'
    -e '/^ *>* *$/d'

    # reformat verse nums to be right-aligned
    -e 's/^([0-9]{2}) / \1/g'
    -e 's/^([0-9]{1})  /  \1/g'
    -e 's/^([¹²³⁴⁵⁶]) (.*)/   \1[\2]/g'

    # fix verses in hundreds
    -e 's/^([0-9]{3}) *> /\1   > /g'
    
    # fix ↓ with no space before >
    -e "s/↓>/↓ >/"
  )
  text=$(echo "$text" | sed -E "${sed_args[@]}")
}

print_passage() {
  output="$(
    sed_args=(
      # format editorial headings
      -e 's/^ *## (.*)//'
      -e '/^$/d'
    )
    text=$(echo "$text" | sed -E "${sed_args[@]}")
    echo "$hline"
    padding=$(((width + ${#title}) / 2))
    printf "%*s\n" $padding "$title"
    echo "$hline"
    # echo -e "${text}" | awk "/^ *$(($2)) /{print; flag=1; next} /^ *$(($3 + 1)) /{flag=0} flag"
    echo -e "${text}" | awk "/^ *$(($2)) /{print \"\033[31m\" \$0; flag=1; next} /^ *$(($3 + 1)) /{flag=0} flag {print \"\033[31m\" \$0}"

  )"
  echo "$output" | less -RFX
  echo -en "\033[0m"
}

print_verse() {
    sed_args=(
      # format editorial headings
      -e 's/^ *## (.*)//'
      -e '/^$/d'
    )
  text=$(echo "$text" | sed -E "${sed_args[@]}")
  echo "$hline"
  padding=$(((width + ${#title}) / 2))
  printf "%*s\n" $padding "$title"
  echo "$hline"
  if [[ $ARG_CONTEXT == 'true' ]]; then
    echo -e "${text}" | awk "/^ *$(($2 - 2)) /{print; flag=1; next} /^ *$(($2 - 1)) /{flag=0} flag"
    echo -e "${text}" | awk "/^ *$(($2 - 1)) /{print; flag=1; next} /^ *$(($2 - 0)) /{flag=0} flag"
    echo -e "${text}" | awk "/^ *$2 /{print \"\033[31m\" \$0; flag=1; next} /^ *($(($2 + 1)) |¹)/{flag=0} flag"
    echo -en "\033[0m"
    echo -e "${text}" | awk "/^ *$(($2 + 1)) /{print; flag=1; next} /^ *($(($2 + 2)) |¹)/{flag=0} flag"
    echo -e "${text}" | awk "/^ *$(($2 + 2)) /{print; flag=1; next} /^ *($(($2 + 3)) |¹)/{flag=0} flag"
  elif [[ $ARG_CONTEXT == 'false' ]]; then
    echo -e "${text}" | awk "/^ *$2 /{print \"\033[31m\" \$0; flag=1; next} /^ *($(($2 + 1)) |¹)/{flag=0} flag"
    echo -en "\033[0m"
  fi
}

print_chapter() {
  sed_args=(
    -e '1s/^      ## (.*)/      [\1]/g'
    -e 's/^      ## (.*)/\n      [\1]/g'
    # add blank line before footnotes
    -e 's/^ *¹/\n&/'
  )
  text=$(echo "$text" | sed -E "${sed_args[@]}")
  output="$(
    echo "$hline"
    padding=$(((width + ${#title}) / 2))
    printf "%*s\n" $padding "$title"
    echo "$hline"
    echo -e "$text"
  )"
  echo "$output" | less -RFX
}

main "$@"
