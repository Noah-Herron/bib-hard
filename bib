#!/bin/bash
# shellcheck disable=1111,1112,2030,2031,2034,2086

# change if your bible folder has a different name
bible_name="bible"

main() {
  if [ $# -eq 0 ]; then
    # start console mode
    start_bib_console
  else
    # set variables and print chapter
    book=$(echo "$1" | sed 's/[0-9]*$//')
    chapter=$(echo "$1" | sed 's/^[0-9]*[a-zA-Z]*//')
    set -- "$book" "$chapter" "$2" "$3"
    start_processing "$@"
  fi
  exit 0
}

start_processing() {
  get_scripture "$@"
  if [[ -n "${scripture}" ]]; then
    get_terminal_width
    get_hline
    get_title "$@"
    cleanup_markdown
    justify_scripture
    cleanup_scripture
    output_scripture "$@"
  fi
}

start_bib_console() {
  echo "bib (interactive CLI prompt)"
  echo "Type 'exit' to quit. Enter Bible reference (e.g., john3 16)"

  # history
  export HISTFILE=~/.bib_history
  export HISTSIZE=1000
  shopt -s histappend

  history -n
  
  while true; do
    # prompt the user for input
      read -e -p ">>> " input

    # exit condition
    if [[ "$input" == "exit" || "$input" == "quit" ]]; then
      break
    fi

    if [[ "$input" =~ ^([0-9]*[a-z]+)([0-9]*)?([ ]?[0-9]+)?([ ]?[0-9]+)?$ ]]; then
      # extract book, chapter, starting verse, ending verse
      set -- "${BASH_REMATCH[1]}" "${BASH_REMATCH[2]// /}" "${BASH_REMATCH[3]// /}" "${BASH_REMATCH[4]// /}"

      # add command to history
      echo $1$2 $3 $4 >> ${HISTFILE}

      # begin fetching scripture and then output
      start_processing "$@"
    fi

    set -- "" "" "" ""
    hline=""
    title=""
    separator=""
    scripture=""

    # history
    history -n
  done
}

set_books_array() {
  books_array='{
    "genesis": ["gen", "gn", "ge"],
    "exodus": ["ex", "exod", "exo"],
    "leviticus": ["lev", "le", "lv"],
    "numbers": ["num", "nu", "nm", "nb"],
    "deuteronomy": ["deut", "de", "dt"],
    "joshua": ["josh", "jos", "jsh"],
    "judges": ["judg", "jdg", "jg", "jdgs"],
    "ruth": ["rth", "ru"],
    "1samuel": ["1sam", "1sm", "1sa", "1s"],
    "2samuel": ["2sam", "2sm", "2sa", "2s"],
    "1kings": ["1kgs", "1ki", "1kin", "1k"],
    "2kings": ["2kgs", "2ki", "2kin", "2k"],
    "1chronicles": ["1chron", "1chr", "1ch"],
    "2chronicles": ["2chron", "2chr", "2ch"],
    "ezra": ["ezr", "ez"],
    "nehemiah": ["neh", "ne"],
    "esther": ["est", "esth", "es"],
    "job": ["jb"],
    "psalm": ["ps", "pslm", "psa", "psm", "pss", "psalms"],
    "proverbs": ["prov", "pro", "prv", "pr", "proverb"],
    "ecclesiastes": ["eccles", "eccle", "ecc", "ec"],
    "song": ["songofsolomon", "songofsongs", "sos", "so"],
    "isaiah": ["isa", "is"],
    "jeremiah": ["jer", "je", "jr"],
    "lamentations": ["lam", "la"],
    "ezekiel": ["ezek", "eze", "ezk"],
    "daniel": ["dan", "da", "dn"],
    "hosea": ["hos", "ho"],
    "joel": ["jl"],
    "amos": ["am"],
    "obadiah": ["obad", "ob"],
    "jonah": ["jnh", "jon"],
    "micah": ["mic", "mc"],
    "nahum": ["nah", "na"],
    "habakkuk": ["hab", "hb"],
    "zephaniah": ["zeph", "zep", "zp"],
    "haggai": ["hag", "hg"],
    "zechariah": ["zech", "zec", "zc"],
    "malachi": ["mal", "ml"],
    "matthew": ["matt", "mt"],
    "mark": ["mrk", "mar", "mk", "mr"],
    "luke": ["luk", "lk"],
    "john": ["joh", "jhn", "jn"],
    "acts": ["act", "ac"],
    "romans": ["rom", "ro", "rm"],
    "1corinthians": ["1cor", "1co"],
    "2corinthians": ["2cor", "2co"],
    "galatians": ["gal", "ga"],
    "ephesians": ["eph", "ephes"],
    "philippians": ["phil", "php", "pp"],
    "colossians": ["col", "co"],
    "1thessalonians": ["1thess", "1thes", "1th"],
    "2thessalonians": ["2thess", "2thes", "2th"],
    "1timothy": ["1tim", "1ti"],
    "2timothy": ["2tim", "2ti"],
    "titus": ["tit", "ti"],
    "philemon": ["philem", "phm", "pm"],
    "hebrews": ["heb"],
    "james": ["jas", "jm"],
    "1peter": ["1pet", "1pe", "1pt", "1p"],
    "2peter": ["2pet", "2pe", "2pt", "2p"],
    "1john": ["1joh", "1jhn", "1jn", "1j", "1joh", "1jo"],
    "2john": ["2joh", "2jhn", "2jn", "2j", "2joh", "2jo"],
    "3john": ["3joh", "3jhn", "3jn", "3j", "3jhn", "3jo"],
    "jude": ["jud", "jd"],
    "revelation": ["rev", "re"]
  }'
}

show_help() {
  echo "Usage: $0 [-ch]"
  echo "   -c    Disable context verses"
  echo "   -h    Display help"
  echo "   -a    Display list of abbreviations"
  exit 1
}

show_abbreviations() {
  set_books_array
  get_terminal_width
  get_hline

  abbreviations="$(
    echo "$books_array" | jq -r 'to_entries | .[] | "\(.key) | \(.value | join(", "))"' | column -t -s '|'
  )"

  justify_abbreviations

  output="$(
    echo "$hline"
    title="Abbreviations"
    padding=$(((width + ${#title}) / 2))
    printf "%*s\n" $padding "$title"
    echo "$hline"

    notice1="|      1, 2, or 3 can also be replaced with any of      |"
    notice2="|  i, ii, iii or first, second, third or 1st, 2nd, 3rd  |"
    
    echo
    padding=$(((width + ${#notice1}) / 2))
    printf "%*s\n" $padding "$notice1"
    padding=$(((width + ${#notice2}) / 2))
    printf "%*s\n" $padding "$notice2"
    echo

    echo -e "${abbreviations}"
  )"

  echo "$output" | less -RFX
  exit 1
}

get_terminal_width() {
  width=$(tput cols)
}

get_scripture() {
  # trim book title and also substitute various numbers
  book=$(echo "$1"|
    # substitute i, ii, and iii for 1, 2 and 3 except for isaiah
    sed 's/^iii/3/'|
    sed 's/^ii/2/'|
    sed 's/^i\([^s]\)/1\1/'|

    # substitute first, second, and third for 1, 2, and 3
    sed 's/^first/1/'|
    sed 's/^second/2/'|
    sed 's/^third/3/'|

    # substitute 1st, 2nd, and 3rd for 1, 2, and 3
    sed 's/^1st/1/'|
    sed 's/^2nd/2/'|
    sed 's/^3rd/3/')

  if [[ $book == "obadiah" ]] || [[ $book == "philemon" ]] || [[ $book == "2john" ]] || [[ $book == "3john" ]] || [[ $book == "jude" ]]; then
    set -- "$book" "" "$verse_start" "$verse_end"
  fi

  # credit to u/bjarneh (https://www.reddit.com/r/commandline/s/ySIsbxOYex)
  # for helping me find files relative to bib
  dir_of_script=$(dirname "$(readlink -f $0)")
  bible_dir="${dir_of_script}/${bible_name}"
  chapter_file="${bible_dir}/${book}${2}.md"
  # enter if given book name is an abbreviation
  if [ ! -f "${chapter_file}" ]; then
    set_books_array
    book=$(echo "$books_array" | jq -r --arg book "$book" 'to_entries[] | select(.value[] == $book) | .key')
    # chop off any number put after any of the single chapter books of the Bible
    if [[ $book == "obadiah" ]] || [[ $book == "philemon" ]] || [[ $book == "2john" ]] || [[ $book == "3john" ]] || [[ $book == "jude" ]]; then
      set -- "$book" "" "$verse_start" "$verse_end"
    fi
    chapter_file="${bible_dir}/${book}${2}.md"
    # enter if book name does not exist
    if [ ! -f "${chapter_file}" ]; then
      echo "bib: file not found"
      return 1
    fi
  fi
  scripture=$(cat "${chapter_file}")
}

get_hline() {
    hline=$(
    printf '=%.0s' $(seq 1 "$width")
    echo
  )
}

get_title() {

  # do not use a : for any of the single chapter books of the Bible
  if [[ ! $book == "obadiah" ]] && [[ ! $book == "philemon" ]] && [[ ! $book == "2john" ]] && [[ ! $book == "3john" ]] && [[ ! $book == "jude" ]]; then
    separator=":"
  else
    separator=" "
  fi

  if [[ $4 != '' ]]; then
    title="$(echo "$scripture" | grep '^# .*' | sed 's/# \(.*\) *(*[A-Z]*)*$/\1/')$separator$3-$4"
  elif [[ $3 != '' ]]; then
    title="$(echo "$scripture" | grep '^# .*' | sed 's/# \(.*\) *(*[A-Z]*)*$/\1/')$separator$3"
  else
    title="$(echo "$scripture" | grep '^# .*' | sed 's/# \(.*\) *(*[A-Z]*)*$/\1/')"
  fi
}

cleanup_markdown() {
  sed_args=(
    # remove headings
    -e 's/^(# |#### |##### ).*//'

    # fix instances of `] [`
    -e 's/\] \[/ /'

    # format verses
    -e 's/###### (¶* *[0-9][0-9][0-9])/\1   tempnewline/g'
    -e 's/###### (¶* *[0-9][0-9])/\1    tempnewline/g'
    -e 's/###### (¶* *[0-9])/\1     tempnewline/g'
  )
  scripture=$(echo "$scripture" | sed -E "${sed_args[@]}")

  scripture=$(echo "$scripture" | sed -E ':a;$!{N;s/tempnewline\n//;ba;}')
  scripture=$(echo "$scripture" | sed -E ':a;$!{N;s/\n¶ / ~\n/;ba;}')

  sed_args=(
    # fix/remove markdown syntax
    -e 's/\\\*/tempasterisk/g'
    -e 's/==//g'
    -e 's/—/––/g'

    # italic -> brackets
    -e 's/\*([A-Za-z0-9])/[\1/g'
    -e 's/([A-Za-z0-9!?.,”’;:])\*/\1]/g'

    # \[ -> [ and \] -> ]
    -e 's/\\\[/[/g'
    -e 's/\\\]/]/g'
    -e 's/\\//g'

    # remove footnotes
    # convert footnotes
    -e 's/\[\^1\]:*/¹/g'
    -e 's/\[\^2\]:*/²/g'
    -e 's/\[\^3\]:*/³/g'
    -e 's/\[\^4\]:*/⁴/g'
    -e 's/\[\^5\]:*/⁵/g'
    -e 's/\[\^6\]:*/⁶/g'

    -e 's/^> /      > /g'
    -e 's/tempasterisk/*/g'

    # add space before lines that are not on the same line as the verse num
    -e 's/(^[^0-9 ])/      \1/g'
  )
  scripture=$(echo "$scripture" | sed -E "${sed_args[@]}")
}

justify_scripture() {
  # justify scripture
  if [ $width -le 20 ]; then
    passes=26
  elif [ $width -le 30 ]; then
    passes=15
  elif [ $width -le 40 ]; then
    passes=8
  elif [ $width -le 50 ] || [ $width -le 60 ]; then
    passes=7
  elif [ $width -le 70 ]; then
    passes=6
  elif [ $width -le 80 ]; then
    passes=5
  else
    passes=4
  fi

  for i in $(seq 1 $passes); do
    justify_scripture_poetry
  done
  for i in $(seq 1 $passes); do
    justify_scripture_normal
  done
}

justify_scripture_poetry() {
  sed_args=(
    # add newline when width is a space
    -e "s/^(.{6}>.{$((width - 9))}) /\1\n      > /"

    # hyphenate words that are in width
    -e "s/^(.{6}>.{$((width - 9))})([A-Za-z0-9])([A-Za-z0-9])([A-Za-z0-9])/\1\2-\n      > \3\4/"

    # move char to newline if width-2 is [[
    -e "s/^(.{6}>.{$((width - 10))})\[\[([A-Za-z0-9])/\1\n      > [[\2/"

    # move char to newline if width-3 is a 2-letter word with ] at end
    -e "s/^(.{6}>.{$((width - 11))}) ([A-Za-z0-9]{2}\])/\1\n      > \2/"

    # move char to newline if width-1 is a space or symbol
    -e "s/^(.{6}>.{$((width - 9))})([ “‘[({])([A-Za-z0-9“‘[({][^ ])/\1\n      > \2\3/"
    -e "s/^(.{6}>.{$((width - 9))}) ([A-Za-z0-9“‘[({][^ ])/\1\n      > \2/"

    # ] or ) not followed by space

    # move char to newline if width is a 3+ letter word + ) or ] + punctuation
    -e "s/^(.{6}>.{$((width - 11))}[A-Za-z0-9])([A-Za-z0-9]{2}\))([^ ])/\1-\n      > \2\3/"
    -e "s/^(.{6}>.{$((width - 11))}[A-Za-z0-9])([A-Za-z0-9]{2}\])([^ ])/\1-\n      > \2\3/"

    -e "s/^(.{6}>.{$((width - 10))}[A-Za-z0-9])([A-Za-z0-9]{2}\))([^ ])/\1-\n      > \2\3/"
    -e "s/^(.{6}>.{$((width - 10))}[A-Za-z0-9])([A-Za-z0-9]{2}\])([^ ])/\1-\n      > \2\3/"

    # move char to newline if width is 2 letter word + ) or ] + punctuation
    -e "s/^(.{6}>.{$((width - 11))}) ([A-Za-z0-9]{2}\))([^ ])/\1\n      > \2\3/"
    -e "s/^(.{6}>.{$((width - 10))}) ([A-Za-z0-9]{2}\))([^ ])/\1\n      > \2\3/"
    -e "s/^(.{6}>.{$((width - 11))}[A-Za-z0-9])([A-Za-z0-9]{2}\))([^ ])/\1-\n      > \2\3/"
    -e "s/^(.{6}>.{$((width - 11))}[A-Za-z0-9])([A-Za-z0-9]{2}\))([^ ])/\1-\n      > \2\3/"

    -e "s/^(.{6}>.{$((width - 11))})(\([A-Za-z0-9]{2}\))([^ ])/\1\n      > \2\3/"
    -e "s/^(.{6}>.{$((width - 10))})(\([A-Za-z0-9]{2}\))([^ ])/\1\n      > \2\3/"
    -e "s/^(.{6}>.{$((width - 11))})(\[[A-Za-z0-9]{2}\])([^ ])/\1\n      > \2\3/"
    -e "s/^(.{6}>.{$((width - 10))})(\[[A-Za-z0-9]{2}\])([^ ])/\1\n      > \2\3/"

    -e "s/^(.{6}>.{$((width - 11))}) ([A-Za-z0-9]{2}\])([^ ])/\1\n      > \2\3/"
    -e "s/^(.{6}>.{$((width - 10))}) ([A-Za-z0-9]{2}\])([^ ])/\1\n      > \2\3/"
    -e "s/^(.{6}>.{$((width - 11))}[A-Za-z0-9])([A-Za-z0-9]{2}\])([^ ])/\1-\n      > \2\3/"
    -e "s/^(.{6}>.{$((width - 10))}[A-Za-z0-9])([A-Za-z0-9]{2}\])([^ ])/\1-\n      > \2\3/"

    # ] or ) followed by space

    # move char to newline if width is a 3+ letter word + ) or ] + punctuation
    -e "s/^(.{6}>.{$((width - 10))}[A-Za-z0-9])([A-Za-z0-9]{2}\))/\1-\n      > \2/"
    -e "s/^(.{6}>.{$((width - 10))}[A-Za-z0-9])([A-Za-z0-9]{2}\])/\1-\n      > \2/"

    -e "s/^(.{6}>.{$((width - 9))}[A-Za-z0-9])([A-Za-z0-9]{2}\))/\1-\n      > \2/"
    -e "s/^(.{6}>.{$((width - 9))}[A-Za-z0-9])([A-Za-z0-9]{2}\])/\1-\n      > \2/"

    # move char to newline if width is 2 letter word + ) or ] + punctuation
    -e "s/^(.{6}>.{$((width - 10))}) ([A-Za-z0-9]{2}\))/\1\n      > \2/"
    -e "s/^(.{6}>.{$((width - 9))}) ([A-Za-z0-9]{2}\))/\1\n      > \2/"
    -e "s/^(.{6}>.{$((width - 10))}[A-Za-z0-9])([A-Za-z0-9]{2}\))/\1-\n      > \2/"
    -e "s/^(.{6}>.{$((width - 9))}[A-Za-z0-9])([A-Za-z0-9]{2}\))/\1-\n      > \2/"

    -e "s/^(.{6}>.{$((width - 10))}) ([A-Za-z0-9]{2}\])/\1\n      > \2/"
    -e "s/^(.{6}>.{$((width - 9))}) ([A-Za-z0-9]{2}\])/\1\n      > \2/"
    -e "s/^(.{6}>.{$((width - 10))}[A-Za-z0-9])([A-Za-z0-9]{2}\])/\1-\n      > \2/"
    -e "s/^(.{6}>.{$((width - 9))}[A-Za-z0-9])([A-Za-z0-9]{2}\])/\1-\n      > \2/"

    # move char to newline if width + 1 is punctuation

    -e "s/^(.{6}>.{$((width - 11))}[A-Za-z0-9])([A-Za-z0-9]{2}[!?.,”’;:-]{2})/\1-\n      > \2/"
    -e "s/^(.{6}>.{$((width - 11))}[A-Za-z0-9])([A-Za-z0-9]{2}[!?.,”’;:][^”’])/\1-\n      > \2/"
    -e "s/^(.{6}>.{$((width - 10))}-)([A-Za-z0-9]{2}-)/\1\n      > \2/"
    -e "s/^(.{$((width - 3))}-)([A-Za-z0-9]{2}-)/\1\n      \2/"
    -e "s/^(.{6}>.{$((width - 12))}[A-Za-z0-9])([A-Za-z0-9]{2}[”’][A-Za-z])/\1-\n      > \2/"
    -e "s/^(.{6}>.{$((width - 12))}[A-Za-z0-9])([A-Za-z0-9]{2}[!?.,”’;:-]{3})/\1-\n      > \2/"
    -e "s/^(.{6}>.{$((width - 13))}[A-Za-z0-9])([A-Za-z0-9]{2}[!?.,”’;:-]{4})/\1-\n      > \2/"
    -e "s/^(.{6}>.{$((width - 10))}[A-Za-z0-9])([A-Za-z0-9]{2}[!?.,”’;:])/\1-\n      > \2/"
    -e "s/^(.{6}>.{$((width - 10))}[A-Za-z0-9])([A-Za-z0-9]{2}––)/\1-\n      > \2/"
    -e "s/^(.{6}>.{$((width - 9))}[A-Za-z0-9])([A-Za-z0-9]{2}[!?.,”’;:])/\1-\n      > \2/"

    -e "s/^(.{6}>.{$((width - 11))}) ([A-Za-z0-9]{2}[!?.,”’;:-]{2})/\1\n      > \2/"
    -e "s/^(.{6}>.{$((width - 11))}) ([A-Za-z0-9]{2}[!?.,”’;:][^”’])/\1\n      > \2/"
    -e "s/^(.{6}>.{$((width - 12))}) ([A-Za-z0-9]{2}[”’][A-Za-z])/\1\n      > \2/"
    -e "s/^(.{6}>.{$((width - 12))}) ([A-Za-z0-9]{2}[!?.,”’;:-]{3})/\1\n      > \2/"
    -e "s/^(.{6}>.{$((width - 13))}) ([A-Za-z0-9]{2}[!?.,”’;:-]{4})/\1\n      > \2/"
    -e "s/^(.{6}>.{$((width - 10))}) ([A-Za-z0-9]{2}[!?.,”’;:])/\1\n      > \2/"
    -e "s/^(.{6}>.{$((width - 9))}) ([A-Za-z0-9]{2}[!?.,”’;:])/\1\n      > \2/"

    -e "s/^(.{6}>.{$((width - 10))}) ([A-Za-z0-9]{2}[!?.,”’;:])/\1\n      > \2/"
    -e "s/^(.{6}>.{$((width - 9))}) ([A-Za-z0-9]{2}[!?.,”’;:])/\1\n      > \2/"

    # move char to newline if width-1 is a hyphen
    -e "s/^(.{6}>.{$((width - 9))})-([A-Za-z0-9“‘])/\1-\n      > \2/"

    # move char to newline if width-1 is an em dash
    -e "s/^(.{6}>.{$((width - 10))})––([A-Za-z0-9“‘])/\1––\n      > \2/"

    # move char to newline if width is a hyphen
    -e "s/^(.{6}>.{$((width - 9))})([A-Za-z])-([A-Za-z])/\1\2-\n      > \3/"

    # move char to newline if width is an em dash
    -e "s/^(.{6}>.{$((width - 10))})([A-Za-z])––([A-Za-z])/\1\2––\n      > \3/"

    # add newline right after punctuation
    -e "s/^(.{6}>.{$((width - 8))})([!?.,”’;:])/\1\2\n      > /"

    # fix verses that didn't get move to newline
    -e "s/^(.{6}>.{$((width - 7))}) /\1\n      > /"
    -e "s/^(.{6}>.{$((width - 7))})([!?.,”’;:])/\1\n      > \2/"
    -e "s/^(.{6}>.{$((width - 8))}) /\1\n      > /"
    -e "s/> *>/>/"

    # move char if width + 1 is punctuation
    -e "s/^(.{6}>.{$((width - 10))}) ([A-Za-z0-9]{2}[,])/\1\n      > \2/"
    -e "s/^(.{6}>.{$((width - 9))}) ([A-Za-z0-9]{2}[,])/\1\n      > \2/"

    # fix verse number spacing
    -e 's/([0-9]{1})      /\1     /g'
    -e 's/([0-9]{2})     /\1    /g'
    -e 's/([0-9]{3})    /\1   /g'

    # add newline if width+1 is a space
    -e "s/^(.{4}>.{$((width - 5))}) /\1\n      > /"
  )
  scripture=$(echo "$scripture" | sed -E "${sed_args[@]}")
}

justify_scripture_normal() {
  sed_args=(
    # add newline when width is a space
    -e "s/^(.{$((width - 1))}) /\1\n      /"

    # hyphenate words that are in width
    -e "s/^(.{$((width - 2))}[A-Za-z0-9])([A-Za-z0-9][A-Za-z0-9])/\1-\n      \2/"

    # move char to newline if width-2 is [[
    -e "s/^(.{$((width - 3))})\[\[([A-Za-z0-9])/\1\n      [[\2/"

    # move char to newline if width-3 is a 2-letter word with ] at end
    -e "s/^(.{$((width - 4))}) ([A-Za-z0-9]{2}\])/\1\n      \2/"

    # move char to newline if width-1 is a space or symbol
    -e "s/^(.{$((width - 2))})([“‘[({])([A-Za-z0-9“‘[({][^ ])/\1\n      \2\3/"
    -e "s/^(.{$((width - 2))}) ([A-Za-z0-9“‘[({][^ ])/\1\n      \2/"

    # ] or ) not followed by space

    # move char to newline if width is a 3+ letter word + ) or ] + punctuation
    -e "s/^(.{$((width - 4))}[A-Za-z0-9])([A-Za-z0-9]{2}\))([^ ])/\1-\n      \2\3/"
    -e "s/^(.{$((width - 4))}[A-Za-z0-9])([A-Za-z0-9]{2}\])([^ ])/\1-\n      \2\3/"

    -e "s/^(.{$((width - 3))}[A-Za-z0-9])([A-Za-z0-9]{2}\))([^ ])/\1-\n      \2\3/"
    -e "s/^(.{$((width - 3))}[A-Za-z0-9])([A-Za-z0-9]{2}\])([^ ])/\1-\n      \2\3/"

    # move char to newline if width is 2 letter word + ) or ] + punctuation
    -e "s/^(.{$((width - 4))}) ([A-Za-z0-9]{2}\))([^ ])/\1\n      \2\3/"
    -e "s/^(.{$((width - 3))}) ([A-Za-z0-9]{2}\))([^ ])/\1\n      \2\3/"
    -e "s/^(.{$((width - 4))}[A-Za-z0-9])([A-Za-z0-9]{2}\))([^ ])/\1-\n      \2\3/"
    -e "s/^(.{$((width - 3))}[A-Za-z0-9])([A-Za-z0-9]{2}\))([^ ])/\1-\n      \2\3/"

    -e "s/^(.{$((width - 4))})(\([A-Za-z0-9]{2}\))([^ ])/\1\n      \2\3/"
    -e "s/^(.{$((width - 3))})(\([A-Za-z0-9]{2}\))([^ ])/\1\n      \2\3/"
    -e "s/^(.{$((width - 4))})(\[[A-Za-z0-9]{2}\])([^ ])/\1\n      \2\3/"
    -e "s/^(.{$((width - 3))})(\[[A-Za-z0-9]{2}\])([^ ])/\1\n      \2\3/"

    -e "s/^(.{$((width - 4))}) ([A-Za-z0-9]{2}\])([^ ])/\1\n      \2\3/"
    -e "s/^(.{$((width - 3))}) ([A-Za-z0-9]{2}\])([^ ])/\1\n      \2\3/"
    -e "s/^(.{$((width - 4))}[A-Za-z0-9])([A-Za-z0-9]{2}\])([^ ])/\1-\n      \2\3/"
    -e "s/^(.{$((width - 3))}[A-Za-z0-9])([A-Za-z0-9]{2}\])([^ ])/\1-\n      \2\3/"

    # ] or ) followed by space

    # move char to newline if width is a 3+ letter word + ) or ] + punctuation
    -e "s/^(.{$((width - 3))}[A-Za-z0-9])([A-Za-z0-9]{2}\))/\1-\n      \2/"
    -e "s/^(.{$((width - 3))}[A-Za-z0-9])([A-Za-z0-9]{2}\])/\1-\n      \2/"

    -e "s/^(.{$((width - 2))}[A-Za-z0-9])([A-Za-z0-9]{2}\))/\1-\n      \2/"
    -e "s/^(.{$((width - 2))}[A-Za-z0-9])([A-Za-z0-9]{2}\])/\1-\n      \2/"

    # move char to newline if width is 2 letter word + ) or ] + punctuation
    -e "s/^(.{$((width - 3))}) ([A-Za-z0-9]{2}\))/\1\n      \2/"
    -e "s/^(.{$((width - 2))}) ([A-Za-z0-9]{2}\))/\1\n      \2/"
    -e "s/^(.{$((width - 3))}[A-Za-z0-9])([A-Za-z0-9]{2}\))/\1-\n      \2/"
    -e "s/^(.{$((width - 2))}[A-Za-z0-9])([A-Za-z0-9]{2}\))/\1-\n      \2/"

    -e "s/^(.{$((width - 3))})(\([A-Za-z0-9]{2}\))/\1\n      \2/"
    -e "s/^(.{$((width - 2))})(\([A-Za-z0-9]{2}\))/\1\n      \2/"
    -e "s/^(.{$((width - 3))})(\[[A-Za-z0-9]{2}\])/\1\n      \2/"
    -e "s/^(.{$((width - 2))})(\[[A-Za-z0-9]{2}\])/\1\n      \2/"

    -e "s/^(.{$((width - 3))}) ([A-Za-z0-9]{2}\])/\1\n      \2/"
    -e "s/^(.{$((width - 2))}) ([A-Za-z0-9]{2}\])/\1\n      \2/"
    -e "s/^(.{$((width - 3))}[A-Za-z0-9])([A-Za-z0-9]{2}\])/\1-\n      \2/"
    -e "s/^(.{$((width - 2))}[A-Za-z0-9])([A-Za-z0-9]{2}\])/\1-\n      \2/"

    # move char to newline if width + 1 is punctutation

    -e "s/^(.{$((width - 4))}[A-Za-z0-9])([A-Za-z0-9]{2}[!?.,”’;:-]{2})/\1-\n      \2/"
    -e "s/^(.{$((width - 4))}[A-Za-z0-9])([A-Za-z0-9]{2}[!?.,”’;:][^”’])/\1-\n      \2/"
    -e "s/^(.{$((width - 3))}-)([A-Za-z0-9]{2}-)/\1\n      \2/"
    -e "s/^(.{$((width - 5))}[A-Za-z0-9])([A-Za-z0-9]{2}[”’][A-Za-z])/\1-\n      \2/"
    -e "s/^(.{$((width - 5))}[A-Za-z0-9])([A-Za-z0-9]{2}[!?.,”’;:-]{3})/\1-\n      \2/"
    -e "s/^(.{$((width - 6))}[A-Za-z0-9])([A-Za-z0-9]{2}[!?.,”’;:-]{4})/\1-\n      \2/"
    -e "s/^(.{$((width - 3))}[A-Za-z0-9])([A-Za-z0-9]{2}[!?.,”’;:-])/\1-\n      \2/"
    -e "s/^(.{$((width - 3))}[A-Za-z0-9])([A-Za-z0-9]{2}––)/\1-\n      \2/"
    -e "s/^(.{$((width - 2))}[A-Za-z0-9])([A-Za-z0-9]{2}[!?.,”’;:-])/\1-\n      \2/"

    -e "s/^(.{$((width - 4))}) ([A-Za-z0-9]{2}[!?.,”’;:-]{2})/\1\n      \2/"
    -e "s/^(.{$((width - 4))}) ([A-Za-z0-9]{2}[!?.,”’;:][^”’])/\1\n      \2/"
    -e "s/^(.{$((width - 5))}) ([A-Za-z0-9]{2}[”’][A-Za-z])/\1\n      \2/"
    -e "s/^(.{$((width - 5))}) ([A-Za-z0-9]{2}[!?.,”’;:-]{3})/\1\n      \2/"
    -e "s/^(.{$((width - 6))}) ([A-Za-z0-9]{2}[!?.,”’;:-]{4})/\1\n      \2/"
    -e "s/^(.{$((width - 3))}) ([A-Za-z0-9]{2}[!?.,”’;:-])/\1\n      \2/"
    -e "s/^(.{$((width - 2))}) ([A-Za-z0-9]{2}[!?.,”’;:-])/\1\n      \2/"

    -e "s/^(.{$((width - 3))}) ([A-Za-z0-9]{2}[!?.,”’;:-])/\1\n      \2/"
    -e "s/^(.{$((width - 2))}) ([A-Za-z0-9]{2}[!?.,”’;:-])/\1\n      \2/"

    # move char to newline if width-1 is a hyphen
    -e "s/^(.{$((width - 2))})-([A-Za-z0-9“‘])/\1-\n      \2/"

    # move char to newline if width-1 is an em dash
    -e "s/^(.{$((width - 3))})––([A-Za-z0-9“‘])/\1––\n      \2/"

    # move char to newline if width is a hyphen
    -e "s/^(.{$((width - 2))})([A-Za-z])-([A-Za-z])/\1\2-\n      \3/"

    # move char to newline if width is an em dash
    -e "s/^(.{$((width - 3))})([A-Za-z])––([A-Za-z])/\1\2––\n      \3/"
    -e "s/^(.{$((width - 2))})([A-Za-z])––([A-Za-z])/\1\2––\n      \3/"

    # add newline right after punctuation
    # -e "s/^(.{$((width - 1))})([!?.,”’;:])/\1\2\n      /"

    # fix verses that didn't get move to newline
    # -e "s/^(.{$((width))})([!?.,”’;:])/\1\n      \2/"
    # -e "s/^(.{$((width - 1))}) /\1\n      /"

    # fix verse number spacing
    -e 's/([0-9]{1})      /\1     /g'
    -e 's/([0-9]{2})     /\1   /g'
    -e 's/([0-9]{3})   /\1  /g'
  )
  scripture=$(echo "$scripture" | sed -E "${sed_args[@]}")

  # add newline if width+1 is a space
  scripture=$(echo "$scripture" | sed -E "s/^(.{$((width))}) /\1\n      /")
}

justify_abbreviations() {
  sed_args=(
    -e 's/([^ ])    ([^ ])/\1  \2/g'
    -e 's/([^ ])     ([^ ])/\1   \2/g'
    -e 's/([^ ])      ([^ ])/\1    \2/g'
    -e 's/([^ ])       ([^ ])/\1     \2/g'
    -e 's/([^ ])        ([^ ])/\1      \2/g'
    -e 's/([^ ])         ([^ ])/\1       \2/g'
    -e 's/([^ ])          ([^ ])/\1        \2/g'
    -e 's/([^ ])           ([^ ])/\1         \2/g'
    -e 's/([^ ])            ([^ ])/\1          \2/g'
    -e 's/([^ ])             ([^ ])/\1           \2/g'
    -e 's/([^ ])              ([^ ])/\1            \2/g'
    -e 's/([^ ])               ([^ ])/\1             \2/g'
    -e 's/([^ ])                ([^ ])/\1              \2/g'
    -e 's/([^ ])                 ([^ ])/\1               \2/g'
    -e 's/([^ ])                  ([^ ])/\1                \2/g'
    -e 's/^/  /g'

    # move char to newline if width-1 is a space or symbol
    -e "s/^(.{$((width - 1))})([A-Za-z0-9]*,)/\1\n                   \2/"
    -e "s/^(.{$((width))})([A-Za-z0-9]*,)/\1\n                   \2/"

    -e "s/^(.{$((width - 1))})([A-Za-z0-9]*)$/\1\n                   \2/"
    -e "s/^(.{$((width))})([A-Za-z0-9]*)$/\1\n                   \2/"
  )

  abbreviations=$(echo "$abbreviations" | sed -E "${sed_args[@]}")
}

cleanup_scripture() {
  sed_args=(
    # fix spacing
    -e 's/^ {2,4}([^ ])/      \1/g'
    -e 's/^ {6,}([^ ])/      \1/g'

    # remove unnecessary character
    -e "s/^(.{$((width - 1))})––/\1–/g"

    # change ~ back to pilcrow signs
    -e 's/~/¶/g'
  )
  scripture=$(echo "$scripture" | sed -E "${sed_args[@]}")

  scripture=$(echo "$scripture" | sed -E ':a;$!{N;s/\n *¶ */ ¶/;ba;}')
  scripture=$(echo "$scripture" | sed -E "s/^(.{$((width))})¶/\1\n     ¶/g")
  scripture=$(echo "$scripture" | sed -E ':a;$!{N;s/ ¶\n([0-9])    /\n\1   ↓/;ba;}')
  scripture=$(echo "$scripture" | sed -E ':a;$!{N;s/ ¶\n([0-9][0-9])   /\n\1  ↓/;ba;}')
  scripture=$(echo "$scripture" | sed -E ':a;$!{N;s/ ¶\n([0-9][0-9][0-9])  /\n\1 ↓/;ba;}')

  sed_args=(
    # remove blank lines
    -e 's/ *$//g'
    -e '/^$/d'
    -e '/^ *>* *$/d'

    # reformat verse nums to be right-aligned
    -e 's/^([0-9]{2}) / \1/g'
    -e 's/^([0-9]{1})  /  \1/g'
    -e 's/^([¹²³⁴⁵⁶]) (.*)/   \1[\2]/g'

    # fix verses in hundreds
    -e 's/^([0-9]{3}) *> /\1   > /g'

    # fix ↓ with no space before >
    -e "s/↓>/↓ >/"
  )
  scripture=$(echo "$scripture" | sed -E "${sed_args[@]}")
}

cleanup_chapter() {
    sed_args=(
    -e '1s/^      ## (.*)/      [\1]/g'
    -e 's/^      ## (.*)/\n      [\1]/g'
    # add blank line before footnotes
    -e 's/^ *¹/\n&/'
  )
  scripture=$(echo "$scripture" | sed -E "${sed_args[@]}")
}

cleanup_passage() {
  sed_args=(
    # format editorial headings
    -e 's/^ *## (.*)//'
    -e '/^$/d'
  )
  scripture=$(echo "$scripture" | sed -E "${sed_args[@]}")
}

cleanup_verse() {
  cleanup_passage
}

output_scripture() {
  # output
  if [[ $4 != '' ]]; then
    output_passage "$@"
  elif [[ $3 != '' ]]; then
    output_verse "$@"
  else
    output_chapter
  fi
}

output_chapter() {
  cleanup_chapter
  output="$(
    echo "$hline"
    padding=$(((width + ${#title}) / 2))
    printf "%*s\n" $padding "$title"
    echo "$hline"
    echo -e "$scripture"
  )"
  echo "$output" | less -RFX
}

output_passage() {
  cleanup_passage
  output="$(
    sed_args=(
      # format editorial headings
      -e 's/^ *## (.*)//'
      -e '/^$/d'
    )
    scripture=$(echo "$scripture" | sed -E "${sed_args[@]}")
    echo "$hline"
    padding=$(((width + ${#title}) / 2))
    printf "%*s\n" $padding "$title"
    echo "$hline"
    echo -e "${scripture}" | awk "/^ *$(($3)) /{print \"\033[31m\" \$0; flag=1; next} /^ *$(($4 + 1)) /{flag=0} flag {print \"\033[31m\" \$0}"
  )"
  echo "$output" | less -RFX
  echo -en "\033[0m"
}

output_verse() {
  cleanup_verse
  echo "$hline"
  padding=$(((width + ${#title}) / 2))
  printf "%*s\n" $padding "$title"
  echo "$hline"
  if [[ $ARG_CONTEXT == 'true' ]]; then
    echo -e "${scripture}" | awk "/^ *$(($3 - 2)) /{print; flag=1; next} /^ *$(($3 - 1)) /{flag=0} flag"
    echo -e "${scripture}" | awk "/^ *$(($3 - 1)) /{print; flag=1; next} /^ *$(($3 - 0)) /{flag=0} flag"
    echo -e "${scripture}" | awk "/^ *$3 /{print \"\033[31m\" \$0; flag=1; next} /^ *($(($3 + 1)) |¹)/{flag=0} flag"
    echo -en "\033[0m"
    echo -e "${scripture}" | awk "/^ *$(($3 + 1)) /{print; flag=1; next} /^ *($(($3 + 2)) |¹)/{flag=0} flag"
    echo -e "${scripture}" | awk "/^ *$(($3 + 2)) /{print; flag=1; next} /^ *($(($3 + 3)) |¹)/{flag=0} flag"
  elif [[ $ARG_CONTEXT == 'false' ]]; then
    echo -e "${scripture}" | awk "/^ *$3 /{print \"\033[31m\" \$0; flag=1; next} /^ *($(($3 + 1)) |¹)/{flag=0} flag"
    echo -en "\033[0m"
  fi
}

# Process command line args
ARG_CONTEXT="true"
while getopts ':cah?' c; do
  case $c in
  c) ARG_CONTEXT="false" ;;
  a) show_abbreviations ;;
  h | ?) show_help ;;
  esac
done
shift $((OPTIND - 1))

main "$@"
